// Code generated by MockGen. DO NOT EDIT.
// Source: internal/bus/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBus is a mock of Bus interface
type MockBus struct {
	ctrl     *gomock.Controller
	recorder *MockBusMockRecorder
}

// MockBusMockRecorder is the mock recorder for MockBus
type MockBusMockRecorder struct {
	mock *MockBus
}

// NewMockBus creates a new mock instance
func NewMockBus(ctrl *gomock.Controller) *MockBus {
	mock := &MockBus{ctrl: ctrl}
	mock.recorder = &MockBusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBus) EXPECT() *MockBusMockRecorder {
	return m.recorder
}

// Publish mocks base method
func (m *MockBus) Publish(ctx context.Context, text string, destIDs []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, text, destIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockBusMockRecorder) Publish(ctx, text, destIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockBus)(nil).Publish), ctx, text, destIDs)
}

// Broadcast mocks base method
func (m *MockBus) Broadcast(ctx context.Context, text string, sourceID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Broadcast", ctx, text, sourceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Broadcast indicates an expected call of Broadcast
func (mr *MockBusMockRecorder) Broadcast(ctx, text, sourceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockBus)(nil).Broadcast), ctx, text, sourceID)
}

// Subscribe mocks base method
func (m *MockBus) Subscribe(ctx context.Context, sourceIDs []int, destID int) (<-chan string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, sourceIDs, destID)
	ret0, _ := ret[0].(<-chan string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockBusMockRecorder) Subscribe(ctx, sourceIDs, destID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockBus)(nil).Subscribe), ctx, sourceIDs, destID)
}
